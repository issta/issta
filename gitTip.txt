-----------------------------------------------------------
#             Issta Gao的GitHub学习笔记
-----------------------------------------------------------
#    ┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
#    │ │ │ │2│0│1│9│0│4│0│5│_│2│2│5│5│@│h│o│m│e│ │ │ │ │
#    └─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘
-----------------------------------------------------------

clone已有仓库
git clone git@github.com:issta/issta.git

-----------------------------------------------------------
-----------------------------------------------------------
测试ssh连接
ssh -T git@github.com

$ ssh -T git@github.com
git@github.com: Permission denied (publickey).

这种情况一般是因为生成秘钥文件时对文件进行了重命名，然而你自定义的这个名字并没有和ssh内部规定的名字保持一致，所以使用ssh -T git@github.com报错Permission denied (publickey).。解决方法如下：
先执行：ssh-agent bash  （一定要先执行这一步！）
再执行：ssh-add ~/.ssh/xxx  （xxx为你想要用的文件名）

#---------------------------------------------------------#
$ ssh-agent bash

$ ssh-add ~/.ssh/id_rsa
Enter passphrase for /c/Users/hip4082/.ssh/id_rsa:

$ ssh -T git@github.com
Hi issta/issta! You've successfully authenticated, but GitHub does not provide shell access.

-----------------------------------------------------------
-----------------------------------------------------------


id_rsa文件是私有密钥  id_rsa.pub是公开密钥

查看公开密钥
cat ~/.ssh/id_rsa.pub

复制公钥
cat /c/users/hip4082/.ssh/issta_id_rsa.pub | clip

clone 已有仓库
git clone git@github.com:issta/issta.git

创建SSH Key
ssh-keygen -t rsa -C "issta0309@outlook.com"


显示Git仓库的状态
git status

查看提交日志
git log

-----------------------------------------------------------
-----------------------------------------------------------
向暂存区中添加文件
git add isstatest.txt

git commit保存仓库的历史记录

记述一行提交信息，-m 参数后的"..."称作提交信息，是对这个提交的概述
git commit -m "Add Issta's first file to github by git"

如果想要记述得更加详细，不加-m，直接执行git commit命令。
执行后编辑器就会启动：

第一行：用一行文字简述提交的更改内容
第二行：空行
第三行以后：记述更改的原因和详细内容

git commit --amend——修改提交信息
$ git commit --amend

没必要先执行git add命令再执行git commit命令, -am命令来一次完成这两步操作
$ git commit -am "Add feature-C"

向本地的feature-D 分支提交更改
$ git commit -am "Add feature-D"


-----------------------------------------------------------
-----------------------------------------------------------
显示文件的改动
git log -p README.md

查看工作树和暂存区的差别
git diff

查看工作树和最新提交的差别
git diff HEAD

-----------------------------------------------------------
-----------------------------------------------------------
git branch——显示分支一览表
$ git branch -a
用git branch -a命令查看当前分支的相关信息。添加-a
参数可以同时显示本地仓库和远程仓库的分支信息

-----------------------------------------------------------
git checkout -b——创建、切换分支:
$ git checkout -b feature-A
$ git checkout -b fix-B
等效于
$ git branch feature-A
$ git checkout feature-A

切换到master 分支：$ git checkout master
切换回上一个分支： $ git checkout -

获取远程的feature-D 分支
git checkout -b feature-D origin/feature-D

-----------------------------------------------------------
git merge——合并分支
$ git merge --no-ff feature-A
$ git merge --no-ff fix-B

git log --graph——以图表形式查看分支
$ git log --graph


git reset——回溯历史版本（哈希值只要输入4 位以上就可以执行）
$ git reset --hard 目标时间点的哈希值

git reflog--查看当前仓库执行过的操作的日志

git reset --hard命令回溯历史
$ git reset --hard 83b0b94

git rebase -i——压缩历史
$ git rebase -i HEAD~2
pick 7a34294 Add feature-C  #将6fba227 的Fix typo 的历史记录压缩到Add feature-C里。
fixup 6fba227 Fix typo      #将6fba227 左侧的pick 部分删除，改写为fixup

-----------------------------------------------------------
-----------------------------------------------------------
git remote add——添加远程仓库
$ git remote add origin git@github.com:github-book/git-tutorial.git
按照上述格式执行git remote add命令之后，Git 会自动将
git@github.com:github-book/git-tutorial.git远程仓库的名称设置为origin（标识符）

git push——推送至远程仓库
$ git push -u origin master
当前分支的内容就会被推送给远程仓库origin 的master 分支。
-u参数可以在推送的同时，将origin 仓库的master 分支设置为本地仓库当前分支的upstream（上游）

推送至master 以外的分支
$ git checkout -b feature-D
$ git push -u origin feature-D

git pull——获取最新的远程仓库分支
$ git pull origin feature-D
使用git pull命令，将本地的feature-D 分支更新到最新状态

git clone——获取远程仓库
$ git clone git@github.com:github-book/git-tutorial.git
执行git clone命令后我们会默认处于master 分支下，同时系统
会自动将origin 设置成该远程仓库的标识符。也就是说，当前本地仓库
的master 分支与GitHub 端远程仓库（origin）的master 分支在内容上是
完全相同的


-----------------------------------------------------------
-----------------------------------------------------------

master分支推送到develop_BJ分支

 (master)分支打包
$ git format-patch -p1
0001-Fu-bugid-De-LDW.patch

(master)切换分支
$ git checkout develop_BJ
Switched to branch 'develop_BJ'
Your branch is up to date with 'origin/develop_BJ'.

(develop_BJ)查看
$ git am
.git/                       0001-Fu-bugid-De-LDW.patch  include/                    src/

(develop_BJ)提交
$ git am 0001-Fu-bugid-De-LDW.patch
.git/rebase-apply/patch:894: trailing whitespace.
#include "rt_roundf_snf.h"
warning: 1 line adds whitespace errors.
Applying: Fu/bugid+De:优化LDW报警逻辑

(develop_BJ)查看日志
$ git log
commit b94bd4169f30d2705a24322ec8f70ba091fafff0 (HEAD -> develop_BJ)



-----------------------------------------------------------
-----------------------------------------------------------
在GitHub 中，很多页面都可以使用键盘快捷键:
https://github.com/issta/issta

在各个页面按下shift ＋ / 都可以打开键盘快捷键一览表


-----------------------------------------------------------
推荐超级好的学习资料和网站：
https://git-scm.com/book/en/v2
https://git-scm.com/book/zh/v2

https://github.com/schacon
http://pcottle.github.io/learnGitBranching/
http://try.github.io/

-----------------------------------------------------------
/*
┌─┬─┬─┬─┐
│a│b│c│d│
├─┼─┼─┼─┤
│ │ │ │ │
├─┼─┼─┼─┤
│ │ │ │ │
└─┴─┴─┴─┘
*/
-----------------------------------------------------------
