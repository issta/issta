-----------------------------------------------------------
#             Issta Gao的GitHub学习笔记
-----------------------------------------------------------
#    ┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
#    │ │ │ │2│0│1│9│0│4│0│5│_│2│2│5│5│@│h│o│m│e│ │ │ │ │
#    └─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘
-----------------------------------------------------------

clone已有仓库
git clone git@github.com:issta/issta.git

-----------------------------------------------------------
-----------------------------------------------------------
测试ssh连接
ssh -T git@github.com

$ ssh -T git@github.com
git@github.com: Permission denied (publickey).

这种情况一般是因为生成秘钥文件时对文件进行了重命名，然而你自定义的这个名字并没有和ssh内部规定的名字保持一致，所以使用ssh -T git@github.com报错Permission denied (publickey).。解决方法如下：
先执行：ssh-agent bash  （一定要先执行这一步！）
再执行：ssh-add ~/.ssh/xxx  （xxx为你想要用的文件名）

#---------------------------------------------------------#
$ ssh-agent bash

$ ssh-add ~/.ssh/id_rsa
Enter passphrase for /c/Users/hip4082/.ssh/id_rsa:

$ ssh -T git@github.com
Hi issta/issta! You've successfully authenticated, but GitHub does not provide shell access.

-----------------------------------------------------------
-----------------------------------------------------------


id_rsa文件是私有密钥  id_rsa.pub是公开密钥

查看公开密钥
cat ~/.ssh/id_rsa.pub

复制公钥
cat /c/users/hip4082/.ssh/issta_id_rsa.pub | clip

clone 已有仓库
git clone git@github.com:issta/issta.git

创建SSH Key
ssh-keygen -t rsa -C "issta0309@outlook.com"


显示Git仓库的状态
git status

查看提交日志
git log

-----------------------------------------------------------
-----------------------------------------------------------
向暂存区中添加文件
git add isstatest.txt

git commit保存仓库的历史记录

记述一行提交信息，-m 参数后的"..."称作提交信息，是对这个提交的概述
git commit -m "Add Issta's first file to github by git"

如果想要记述得更加详细，不加-m，直接执行git commit命令。
执行后编辑器就会启动：

第一行：用一行文字简述提交的更改内容
第二行：空行
第三行以后：记述更改的原因和详细内容

git commit --amend——修改提交信息
$ git commit --amend


-----------------------------------------------------------
-----------------------------------------------------------
显示文件的改动
git log -p README.md

查看工作树和暂存区的差别
git diff

查看工作树和最新提交的差别
git diff HEAD

-----------------------------------------------------------
-----------------------------------------------------------
git branch——显示分支一览表
-----------------------------------------------------------
git checkout -b——创建、切换分支:
$ git checkout -b feature-A
$ git checkout -b fix-B
等效于
$ git branch feature-A
$ git checkout feature-A

切换到master 分支：$ git checkout master
切换回上一个分支： $ git checkout -
-----------------------------------------------------------
git merge——合并分支
$ git merge --no-ff feature-A
$ git merge --no-ff fix-B

git log --graph——以图表形式查看分支
$ git log --graph


git reset——回溯历史版本（哈希值只要输入4 位以上就可以执行）
$ git reset --hard 目标时间点的哈希值

git reflog--查看当前仓库执行过的操作的日志

git reset --hard命令回溯历史
$ git reset --hard 83b0b94

git rebase -i——压缩历史


-----------------------------------------------------------
/*
┌─┬─┬─┬─┐
│a│b│c│d│
├─┼─┼─┼─┤
│ │ │ │ │
├─┼─┼─┼─┤
│ │ │ │ │
└─┴─┴─┴─┘
*/
-----------------------------------------------------------